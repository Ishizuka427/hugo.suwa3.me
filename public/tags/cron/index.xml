<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cron on suwa3 blog</title>
    <link>https://hugo.suwa3.me/tags/cron/</link>
    <description>Recent content in cron on suwa3 blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <lastBuildDate>Sat, 28 Dec 2019 13:00:00 +0000</lastBuildDate><atom:link href="https://hugo.suwa3.me/tags/cron/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Pixelaという草APIサービスを利用して、WordPressのPV数をGitHub風に草生やしてサイドバーに表示させたい(丁寧に)</title>
      <link>https://hugo.suwa3.me/post/2019-12-28-pixela%E3%81%A8%E3%81%84%E3%81%86%E8%8D%89api%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%82%92%E5%88%A9%E7%94%A8%E3%81%97%E3%81%A6wordpress%E3%81%AEpv%E6%95%B0%E3%82%92github%E9%A2%A8%E3%81%AB-2/</link>
      <pubDate>Sat, 28 Dec 2019 13:00:00 +0000</pubDate>
      
      <guid>https://hugo.suwa3.me/post/2019-12-28-pixela%E3%81%A8%E3%81%84%E3%81%86%E8%8D%89api%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%82%92%E5%88%A9%E7%94%A8%E3%81%97%E3%81%A6wordpress%E3%81%AEpv%E6%95%B0%E3%82%92github%E9%A2%A8%E3%81%AB-2/</guid>
      <description>https://wp.suwa3.me/2019/12/25/pixela%e3%81%a8%e3%81%84%e3%81%86%e8%8d%89api%e3%82%b5%e3%83%bc%e3%83%93%e3%82%b9%e3%82%92%e5%88%a9%e7%94%a8%e3%81%97%e3%81%a6%e3%80%81wordpress%e3%81%aepv%e6%95%b0%e3%82%92github%e9%a2%a8%e3%81%ab/
こちらのblog内容の続きです。
準備内容だとか箇条書きな感じになっているので
もう少し丁寧に書きます。
まず、GitHub風に草を生やすことができるPixela
超かわいい！！と、見た瞬間一目惚れして
ぜひこれでblogのPV数をサイドバーなどに表示させたいと思いました。
(スマホの場合は下にスクロールしてもらうと記事＆検索窓の下に表示されます)
順序としては以下のとおりです。
PixelaでユーザーとIDを作成してグラフを表示させてみる PV数を調べるため、対象blogにGoogleAnalyticsを導入する GoogleAnalytics APIを利用してjsonファイルをDLする PythonでjsonファイルからPixelaの求める出力ができるように整形する ディレクトリをサーバーなどに置いてcron実行させる htmlにで埋め込む PixelaでユーザーとIDを作成してグラフを表示させてみる https://pixe.la/
こちらのサービスですが
基本的にすべてWeb APIで構成されるサービスになるため
ユーザーやIDの登録など、設定もAPIで行います。
初めはユーザー登録からAPIで設定することにハードルの高さを感じたのですが
使ううちに、無駄がなくて洗練されているなぁと感じるようになりました。
以下の
a-know には自分の希望ユーザー名
thisissecret にはパスワードを入力します。
$ curl -X POST https://pixe.la/v1/users -d &amp;#39;{&amp;#34;token&amp;#34;:&amp;#34;thisissecret&amp;#34;, &amp;#34;username&amp;#34;:&amp;#34;a-know&amp;#34;, &amp;#34;agreeTermsOfService&amp;#34;:&amp;#34;yes&amp;#34;, &amp;#34;notMinor&amp;#34;:&amp;#34;yes&amp;#34;}&amp;#39; 成功すると以下が表示されます。
{&amp;#34;message&amp;#34;:&amp;#34;Success.&amp;#34;,&amp;#34;isSuccess&amp;#34;:true} test-graph には希望するID(URLに使われます)
graph-name には希望する名前
commit には希望する単位(kgやｍなどでもOK)
int は、今回はPV数ということで整数を扱うのでそのままです。
shibafu には色を入力します。
green,red,blue,yellow,purple,blackから選べます。
$ curl -X POST https://pixe.la/v1/users/a-know/graphs -H &amp;#39;X-USER-TOKEN:thisissecret&amp;#39; -d &amp;#39;{&amp;#34;id&amp;#34;:&amp;#34;test-graph&amp;#34;,&amp;#34;name&amp;#34;:&amp;#34;graph-name&amp;#34;,&amp;#34;unit&amp;#34;:&amp;#34;commit&amp;#34;,&amp;#34;type&amp;#34;:&amp;#34;int&amp;#34;,&amp;#34;color&amp;#34;:&amp;#34;shibafu&amp;#34;}&amp;#39; 成功すると以下が表示されます。
{&amp;#34;message&amp;#34;:&amp;#34;Success.&amp;#34;,&amp;#34;isSuccess&amp;#34;:true} ブラウザで以下にアクセスします。
a-know にはユーザー名 test-graph にはIDを指定してください。
https://pixe.la/v1/users/a-know/graphs/test-graph
(ユーザー名にsuwa3/IDにtest-graphを指定した例)</description>
    </item>
    
    <item>
      <title>PORTでもくもく</title>
      <link>https://hugo.suwa3.me/post/2019-11-23-port%E3%81%A7%E3%82%82%E3%81%8F%E3%82%82%E3%81%8F/</link>
      <pubDate>Sat, 23 Nov 2019 13:00:00 +0000</pubDate>
      
      <guid>https://hugo.suwa3.me/post/2019-11-23-port%E3%81%A7%E3%82%82%E3%81%8F%E3%82%82%E3%81%8F/</guid>
      <description>PORTのもくもく会に行きました。
先月行けなかったので、少し久しぶりな感じでした。
だんだん知り合いが増えてきて、ホーム感増してきたの嬉しいなぁ。
LTをやったので懇親会にも初参戦したよ。
あまり話したことない人とたくさん話せて楽しかったです。
主に趣味鯖上で運用しているSNSの
dumpのcronを書き換えたりsidekiqの設定を変えたりしました。
備忘録を残します。
$ crontab -l 0 0 * * * docker run &amp;ndash;link mastodon_db_1 &amp;ndash;volume /opt/backup:/mnt/backup &amp;ndash;network mastodon_internal_network postgres:9.6-alpine /bin/sh -c &amp;ldquo;pg_dump -U postgres -h mastodon_db_1 postgres | gzip -c &amp;gt; /mnt/backup/dump-`date +&amp;rsquo;%Y-%m-%d&amp;rsquo;`.sql.gz; exit&amp;rdquo; &amp;gt; ~/cron.log 2&amp;gt;&amp;amp;1
本当はローカルにdump取りたいの
でもとりあえずdiscfullでEC2が定期的に落ちるのどうにかしたいので
`date +&amp;rsquo;%Y-%m-%d&amp;rsquo;`
ここの部分を削除して
dumpファイルが最新のものに上書きされるようにしました。
つまりこうです。
$ crontab -l 0 0 * * * docker run &amp;ndash;link mastodon_db_1 &amp;ndash;volume /opt/backup:/mnt/backup &amp;ndash;network mastodon_internal_network postgres:9.6-alpine /bin/sh -c &amp;ldquo;pg_dump -U postgres -h mastodon_db_1 postgres | gzip -c &amp;gt; /mnt/backup/dump.</description>
    </item>
    
    <item>
      <title>~/.ssh/configの設定など</title>
      <link>https://hugo.suwa3.me/post/2019-09-04-ssh-config%E3%81%AE%E8%A8%AD%E5%AE%9A%E3%81%AA%E3%81%A9/</link>
      <pubDate>Wed, 04 Sep 2019 09:00:00 +0000</pubDate>
      
      <guid>https://hugo.suwa3.me/post/2019-09-04-ssh-config%E3%81%AE%E8%A8%AD%E5%AE%9A%E3%81%AA%E3%81%A9/</guid>
      <description>はあい、本日のTODOです。
~/.ssh/configの設定 先日Docker沈黙タイムがやたら長くて帰れない事態に陥ったので
~/.ssh/configに、サーバーへ60秒毎に生きている報告をする設定を書きました。
~/.ssh/configについて - Qiita
ラズパイにログインするのも簡単になった。
やったねえ
cronをAnsibleに追加
そしてメディア削除のDockerコマンドをcronで実行したもの。
（参照）usermod/cronでdocker-compose – うさぎでもわかる
これを構成管理に組み込むためAnsibleに設定しました。
9ddで一気に9行消せた、わーい
そしてdd連打していたら関係ないところも消してしまい
ひーん😢となって調べたらuで元に戻せました。
viコマンド *dd
カーソルがあるところから*行削除 ex.3dd（3行削除）
*yy
カーソルがあるところから*行コピー
p
ペースト
u
操作を一つ戻す
Ctrl+r
戻すのを戻す
※ dd,yyでそれぞれ1行削除/コピー
デスクトップのゴミ箱化どうにかする
デスクトップがゴミ箱代わりになっていて
スクリーンの設定で見えないようにしていたの。
きちんと整理したいとおもい
スクショの保存先がデスクトップなのが諸悪の根源だと考え
保存先を指定できるか調べました。
Macのスクリーンショットの保存先を変更する｜MacFan
ホームにSSディレクトリを作成して以下のコマンドを実行
$ defaults write com.apple.screencapture location ~/SS/;killall SystemUIServer
変更できた。わーい
むかしスクショしたものが出てきたよ。
たぶんvenvで仮想環境つくり、Pythonで春って単語を含むものをホニャララしたやつ。（忘れた）
このころはコンテナもクラウドもなんでもかんでも仮想っていうから
仮想わけわからんっておもっていた。懐かしい</description>
    </item>
    
    <item>
      <title>usermod/cronでdocker-compose</title>
      <link>https://hugo.suwa3.me/post/2019-09-03-usermod-cron%E3%81%A7docker-compose/</link>
      <pubDate>Tue, 03 Sep 2019 13:00:00 +0000</pubDate>
      
      <guid>https://hugo.suwa3.me/post/2019-09-03-usermod-cron%E3%81%A7docker-compose/</guid>
      <description>本日のTODOリストです。
ポートを変えるのは気休めだけれども、やってみたいなあと思います。
ユーザー名を変えるのはできた！
Linuxのユーザー名を変更する - そんなこと猫でもできる
そんなこと猫でもできるらしい。
うさぎでもできるかな。
$ sudo docker-compose run &amp;ndash;rm web bundle exec bin/tootctl media remove &amp;ndash;days=25
このコマンドをcronで実行しようとおもって調べた。
# docker-composeコマンドについて
- docker-compose.ymlがある場所で実行される
- ファイルパス-fでdocker-compose.ymlがある場所を指定して実行させることも可能 （下記参照）
$ 0 0 * * * docker-compose -f /******/*******/mastodon/docker-compose.yml run &amp;ndash;rm web &amp;hellip;..
- rootのcrontabに設定する場合はsudoは不要
- crontabは各ユーザーそれぞれにcrontabがある
- rootになった状態で crontab -u（ユーザー名）のようにすれば、それぞれのcrontabを見ることができる
- ユーザー名-uを指定しない場合は、今のユーザーのcrontabが表示される
cron 3ステップ
1.cronでやる前に手動で動くか確認。
2.動いたらcronで毎分確認。
3.動いたら定時で確認。
最近、難しそうだなあってことでも
「調べてやってみればできるのでは？」
ってきもちになってきた。
そして、案外やってみればできるということに気づいた。
とにかくどんどん行動してみている。
たのしいー
ちなみにs3のビフォーアフターです！
画像削除、成功です。やったねえ</description>
    </item>
    
    <item>
      <title>Ansibleでcronの設定まとめ</title>
      <link>https://hugo.suwa3.me/post/2019-08-27-1019/</link>
      <pubDate>Tue, 27 Aug 2019 13:00:12 +0000</pubDate>
      
      <guid>https://hugo.suwa3.me/post/2019-08-27-1019/</guid>
      <description>本日はAnsibleの設定をして、そのコードをまとめました。
隠してあるのはユーザー名と、鍵の置き場所です。
$ vi crontab
これは今いる場所にcrontabというファイルをつくってvimで編集
$ crontab -e
これはcrontabというコマンドの中身をvimで編集。
なんか似ててわからんってなったのでまとめです。
cron.yamlは忘れずgit pushです。
最近git操作も慣れてきたよ。
本日のTODO
やることがどんどん増えている。
早くやりたいい、一日６時間くらい作業時間ほしい。
でも疲れちゃうから、せめて３時間かなあ。
いまは一日に１時間も作業時間ないです。
動画を観る / 技術書を読む
この二つは電車やバスなんかの移動中にもできるので
移動中は、なるべくこの時間にあてよう。</description>
    </item>
    
    <item>
      <title>postgreSQLなど</title>
      <link>https://hugo.suwa3.me/post/2019-08-06-postgresql%E3%81%AA%E3%81%A9/</link>
      <pubDate>Tue, 06 Aug 2019 13:00:33 +0000</pubDate>
      
      <guid>https://hugo.suwa3.me/post/2019-08-06-postgresql%E3%81%AA%E3%81%A9/</guid>
      <description>Chromeの拡張機能でEvernote Webクリッパーを登録し
Evernote経由で、PCとスマホ間の画像の連携をはかろうと思いついたのだけれども
Webクリッパーでスクショできるのはブラウザ内だけなの。
ターミナルやエディタのスクショはできないらしい。
び、びみょう……
とりあえずWeb閲覧時のmemo用だなあ。
.
お昼休みはcronの修正をしておわりました。
cronの設定自体は難しくないことはわかったのだけれども
その中のDockerコマンドがややこしいの。
要復習だなあ。
.
夕方はHomebrewでpostgreSQLのinstallをしました。
blogは下記を参照。
macOs Sierra + homebrewな環境でPostgresqlを導入する備忘録
後半のパス設定は要らなそうだったので、とりあえず触らず。
.
そういえば@女子部でターミナル半透明率かなり高くて
真似してみたの、壁紙の色も相まって涼しげになった。
帰りの移動時間は電車内でPythonの動画を観ていました。
以前スクレイピングの本を読みながら書いた時もあったけれども
もう一度きちんと基礎からやろうとおもいます。
ザーッと読んでバババと書いて
またスクレイピングと機械学習の書籍を参考書として
手を動かすことで慣れたい。</description>
    </item>
    
  </channel>
</rss>
