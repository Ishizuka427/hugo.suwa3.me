<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>github on suwa3 blog</title>
    <link>https://hugo.suwa3.me/tags/github/</link>
    <description>Recent content in github on suwa3 blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <lastBuildDate>Sat, 28 Dec 2019 13:00:00 +0000</lastBuildDate><atom:link href="https://hugo.suwa3.me/tags/github/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Pixelaという草APIサービスを利用して、WordPressのPV数をGitHub風に草生やしてサイドバーに表示させたい(丁寧に)</title>
      <link>https://hugo.suwa3.me/post/2019-12-28-pixela%E3%81%A8%E3%81%84%E3%81%86%E8%8D%89api%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%82%92%E5%88%A9%E7%94%A8%E3%81%97%E3%81%A6wordpress%E3%81%AEpv%E6%95%B0%E3%82%92github%E9%A2%A8%E3%81%AB-2/</link>
      <pubDate>Sat, 28 Dec 2019 13:00:00 +0000</pubDate>
      
      <guid>https://hugo.suwa3.me/post/2019-12-28-pixela%E3%81%A8%E3%81%84%E3%81%86%E8%8D%89api%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%82%92%E5%88%A9%E7%94%A8%E3%81%97%E3%81%A6wordpress%E3%81%AEpv%E6%95%B0%E3%82%92github%E9%A2%A8%E3%81%AB-2/</guid>
      <description>https://wp.suwa3.me/2019/12/25/pixela%e3%81%a8%e3%81%84%e3%81%86%e8%8d%89api%e3%82%b5%e3%83%bc%e3%83%93%e3%82%b9%e3%82%92%e5%88%a9%e7%94%a8%e3%81%97%e3%81%a6%e3%80%81wordpress%e3%81%aepv%e6%95%b0%e3%82%92github%e9%a2%a8%e3%81%ab/
こちらのblog内容の続きです。
準備内容だとか箇条書きな感じになっているので
もう少し丁寧に書きます。
まず、GitHub風に草を生やすことができるPixela
超かわいい！！と、見た瞬間一目惚れして
ぜひこれでblogのPV数をサイドバーなどに表示させたいと思いました。
(スマホの場合は下にスクロールしてもらうと記事＆検索窓の下に表示されます)
順序としては以下のとおりです。
PixelaでユーザーとIDを作成してグラフを表示させてみる PV数を調べるため、対象blogにGoogleAnalyticsを導入する GoogleAnalytics APIを利用してjsonファイルをDLする PythonでjsonファイルからPixelaの求める出力ができるように整形する ディレクトリをサーバーなどに置いてcron実行させる htmlにで埋め込む PixelaでユーザーとIDを作成してグラフを表示させてみる https://pixe.la/
こちらのサービスですが
基本的にすべてWeb APIで構成されるサービスになるため
ユーザーやIDの登録など、設定もAPIで行います。
初めはユーザー登録からAPIで設定することにハードルの高さを感じたのですが
使ううちに、無駄がなくて洗練されているなぁと感じるようになりました。
以下の
a-know には自分の希望ユーザー名
thisissecret にはパスワードを入力します。
$ curl -X POST https://pixe.la/v1/users -d &amp;#39;{&amp;#34;token&amp;#34;:&amp;#34;thisissecret&amp;#34;, &amp;#34;username&amp;#34;:&amp;#34;a-know&amp;#34;, &amp;#34;agreeTermsOfService&amp;#34;:&amp;#34;yes&amp;#34;, &amp;#34;notMinor&amp;#34;:&amp;#34;yes&amp;#34;}&amp;#39; 成功すると以下が表示されます。
{&amp;#34;message&amp;#34;:&amp;#34;Success.&amp;#34;,&amp;#34;isSuccess&amp;#34;:true} test-graph には希望するID(URLに使われます)
graph-name には希望する名前
commit には希望する単位(kgやｍなどでもOK)
int は、今回はPV数ということで整数を扱うのでそのままです。
shibafu には色を入力します。
green,red,blue,yellow,purple,blackから選べます。
$ curl -X POST https://pixe.la/v1/users/a-know/graphs -H &amp;#39;X-USER-TOKEN:thisissecret&amp;#39; -d &amp;#39;{&amp;#34;id&amp;#34;:&amp;#34;test-graph&amp;#34;,&amp;#34;name&amp;#34;:&amp;#34;graph-name&amp;#34;,&amp;#34;unit&amp;#34;:&amp;#34;commit&amp;#34;,&amp;#34;type&amp;#34;:&amp;#34;int&amp;#34;,&amp;#34;color&amp;#34;:&amp;#34;shibafu&amp;#34;}&amp;#39; 成功すると以下が表示されます。
{&amp;#34;message&amp;#34;:&amp;#34;Success.&amp;#34;,&amp;#34;isSuccess&amp;#34;:true} ブラウザで以下にアクセスします。
a-know にはユーザー名 test-graph にはIDを指定してください。
https://pixe.la/v1/users/a-know/graphs/test-graph
(ユーザー名にsuwa3/IDにtest-graphを指定した例)</description>
    </item>
    
    <item>
      <title>GitHubのアカウントを統合</title>
      <link>https://hugo.suwa3.me/post/2019-12-08-github%E3%81%AE%E3%82%A2%E3%82%AB%E3%82%A6%E3%83%B3%E3%83%88%E3%82%92%E7%B5%B1%E5%90%88/</link>
      <pubDate>Sun, 08 Dec 2019 13:00:00 +0000</pubDate>
      
      <guid>https://hugo.suwa3.me/post/2019-12-08-github%E3%81%AE%E3%82%A2%E3%82%AB%E3%82%A6%E3%83%B3%E3%83%88%E3%82%92%E7%B5%B1%E5%90%88/</guid>
      <description>**GitHubの問題解消する
**- 旧アカウント(suwa33)からメインアカウント(suwa3)にオーナー移管
方法: リポジトリのSettings =&amp;gt; Danger Zone =&amp;gt; Transfer ownerhip
- suwa33の方はexampleeeeにする
- Organizationsをsuwa33で作成してHP(GitHubPages)移管
- GitのCommit AuthorとCommiterを変更する(草移管)
- GitHubPages死回避
今日の目標である、GitHubの整備は完全クリアです！
GitHubのアカウントを統合させました。
理由は
プライベート用のGitHubアカウントと
仕事用のアカウントがそれぞれあって
２つの鍵を管理していくのが大変だったのと
MacBookAirが死にかけていたので
なんとかGitHubの内容だけでも脱出させておきたかったからです。
リポジトリの避難 まずsuwa33アカウントからsuwa3アカウントへリポジトリを避難させます。
実際にはリポジトリのオーナーを変更する設定になります。
避難させたいリポジトリのSettingsを開いて
一番下のDanger Zoneまでスクロールし、Transferをクリック
Typeするよう言われた内容をコピペして
引越し先のアカウント名を入力します。
しばらくすると
引越し先のアカウントで登録してあるメールアドレスにメールが届きます。
メール内に
To accept the transfer, visit this link:
と書かれた先にリンクが続くのでクリックします。
このときの注意点で
旧アカウント(ここではsuwa33)からログアウトをして
引越し先のアカウント(ここではsuwa3) にSign Inしてから
メール内のリンクを踏んでください。
成功すると、リポジトリが移行してきています。
GitHub pagesが死ぬのを回避 オーナー名が変更になるため
GitHubの静的サイトのホスティングが適用されなくなりページが死にます
暫定的な対処として以下を行います。
旧アカウントのオーナー名(username)を適当に変更 引越し先のアカウントでOrganizationを作成 Organizationに旧アカウントのオーナー名をつける GitHub静的サイトのリポジトリを移管
↑主な流れは記事上の「リポジトリの避難」と同様 具体的な方法を書いていきます。
GitHubの静的サイトがかつてあった旧アカウント(suwa33)のSettingsから
AccountのChange usernameを選択して
オーナー名の変更をします。
色々聞かれます。</description>
    </item>
    
    <item>
      <title>.gitignore&amp;新リポジトリ</title>
      <link>https://hugo.suwa3.me/post/2019-09-24-gitignore/</link>
      <pubDate>Tue, 24 Sep 2019 13:00:00 +0000</pubDate>
      
      <guid>https://hugo.suwa3.me/post/2019-09-24-gitignore/</guid>
      <description>静的サイトジェネレーターの続きやりました。
Hexoのローカルサーバーを hexo server コマンドで起動しようとしたら
すでに何か走っているらしく起動できなかったので、調べてみた。
$ lsof -i:4000 $ ps -ef | grep 80174
ふむふむ
Hexoだな。
ヘクソって屁糞みたいで汚い。
C+cしても止まらないので、まあいいやとおもい放置です。
$ kill -KILL 80174
で指定して止めることも可能ぽい。
Hexoのディレクトリをgit管理してNetlifyでデプロイするのを早くやりたいので
リポジトリを作るまえにtreeで確認したら
942 directories, 6294 files
途方もない量でした。
どうやら
$HOME/blog/node_modules
この下に大量のディレクトリやファイルがあるみたい。
$ vi .gitignore
と書いたら
なんと最初から不要そうなものが書いてある！
ふしぎ！
gitignore とは Git の管理に含めないファイルを指定するためのファイル。 設定方法：無視設定を行いたいフォルダに .gitignore という名前でテキストファイルを作成する。
gitignore のテンプレ、ググると各言語ごとに用意されている。
なるほどー
チェックを入れずにリポジトリつくって
$ git init .
$ git remote add origin git@github.com:suwa3/Hexo-blog.git
$ git commit -m &amp;lsquo;Initial commit&amp;rsquo; &amp;ndash;allow-empty
$ git push --set-upstream origin master</description>
    </item>
    
    <item>
      <title>README.md整備/$ ls -l</title>
      <link>https://hugo.suwa3.me/post/2019-08-29-readme-md%E6%95%B4%E5%82%99-ls-l/</link>
      <pubDate>Thu, 29 Aug 2019 13:00:46 +0000</pubDate>
      
      <guid>https://hugo.suwa3.me/post/2019-08-29-readme-md%E6%95%B4%E5%82%99-ls-l/</guid>
      <description>お昼はGitHubのAnsibleリポジトリを見栄え良くするために
README.mdを書いていました。
suwa3/don.suwa3.me-ansible
【GitHub】README.md に画像を表示させる簡単な方法
↑この記事、裏技的だけど確かにラクだった。
以前はwikiを使った気がする。
README.mdに埋め込む画像、terminalのgifでも良かったかもしれない。
明日にでも時間を見つけて更新しちゃおーっと。
lsコマンドの-lについて学びました。
まとめた。
3ビット内で、権限が
有るか/無いか
なので、
2進数で最大7まで表すことができるの、
たまたまなのかもしれないけれども
偶然8より下にできたから、それを採用したのかしら。
経緯を知りたいとおもった。
機械側としてわかりやすいもの
人間側としてわかりやすいもの
コンピューター内で、それぞれ少しずつ譲歩している軌跡みたいなもの
たまに見つけると、そこに至った経緯を知りたいなあとおもう。</description>
    </item>
    
    <item>
      <title>GitHub pages</title>
      <link>https://hugo.suwa3.me/post/2019-07-11-github-pages/</link>
      <pubDate>Thu, 11 Jul 2019 13:00:53 +0000</pubDate>
      
      <guid>https://hugo.suwa3.me/post/2019-07-11-github-pages/</guid>
      <description>GitHub pagesでhttps化したよ。PC用ページです。
https://suwa3.github.io/
.
お名前.comのほうで
suwa3.meのサブドメイン設定しようとおもったけれども
設定うにゃにゃにゃーで面倒くさいので
時間あるときにやろうとおもいました。
.
スマホ用ページはまだ整理してないのん、
明日やるー
JS練習で簡単なゲームつくったので
それもソースコードだけGitHubに保存しておいた。
.
くるりと回ってうさぎさん出てくるところまでは書けたので
あとはそれをグラデーションでぬるぬるーとさせたら
数を増やしてランダム要素つけようとおもいます。
.
数式というか関数みたいでおもしろいなあとおもった。
代入の仕方や順番、式さえ間違えなければまあまあ動くし
もっと階層を省略できる場合は
導き出される解はひとつでも解法が様々ある
って感じで
クイズみたいでたのしいです。
数学もそうだけれども
数こなせばこなすほど解法のひらめきが強くなって
はやく効率的に解けるようになるんだろうなあ。
.
JSステップアップしたらNode.jsやりたいなあとおもっていたの
師匠曰くReactかGoにいこう、とのことなので
そちらに向かいます。</description>
    </item>
    
    <item>
      <title>Qiita</title>
      <link>https://hugo.suwa3.me/post/2019-07-06-qiita/</link>
      <pubDate>Sat, 06 Jul 2019 13:00:12 +0000</pubDate>
      
      <guid>https://hugo.suwa3.me/post/2019-07-06-qiita/</guid>
      <description>カラーコードよく使うものは暗記していたの。
赤緑青の16進数の組み合わせだということを知り
｢例えばピンクなら255,160,90くらいかなと目当てつけて16進数に換算すればカラーコードだいたいわかるのでは｣
と、気づいて
30分くらい目当てをつけて16進数に換算するの暗算チャレンジしていたのだけれども
普通にカラーチャートから選択してカラーコード調べる方が早いことに気づきました。
.
あとはAtomからGitHubに直接リポジトリつくれないかしらとおもって
色々と試していたの。
Gitタブや、GitHubタブあるので
おそらくそこからできるの。
しかし検索しても方法を何通りか試したのにうまくいかない。
最終的に諦めてターミナルからやっているblog散見したので
ターミナルから反映する方法をQiitaにまとめました。
https://qiita.com/suwa3/items/0a180e9833c0146e36b5
GitHub開発したエディタのはずなんだけど
何故GitHubに直接リポジトリつくるのグダるのか謎い。
でも便利機能として覚えるよりも
きちんと中で何をしているのか把握出来たので
まあ良いかなあとおもいました。</description>
    </item>
    
  </channel>
</rss>
